// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using api.Data;

namespace api.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.7");

            modelBuilder.Entity("SchoolYear", b =>
                {
                    b.Property<int>("SchoolsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SchoolsId", "YearsId");

                    b.HasIndex("YearsId");

                    b.ToTable("SchoolYear");
                });

            modelBuilder.Entity("api.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalityAr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("api.Models.HumanResource.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("api.Models.HumanResource.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BirthCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpiredIdentity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiredPassport")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullNameAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identity")
                        .HasColumnType("TEXT");

                    b.Property<int?>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile2")
                        .HasColumnType("TEXT");

                    b.Property<string>("Passport")
                        .HasColumnType("TEXT");

                    b.Property<int>("Qualification")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specification")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BirthCountryId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeCountryId");

                    b.HasIndex("Identity")
                        .IsUnique();

                    b.HasIndex("JobId");

                    b.HasIndex("Mobile1")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("api.Models.HumanResource.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("TitleAr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("SectionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SectionId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.OtherSchool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("OtherSchools");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("OtherSchoolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("OtherSchoolId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Logo")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Number")
                        .HasColumnType("TEXT");

                    b.Property<int>("SchoolId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("Number")
                        .IsUnique();

                    b.HasIndex("SchoolId");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Starting")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("YearId");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("End")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Starting")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Years");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ClassId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("GradeId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OpenedById")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YearId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("GradeId");

                    b.HasIndex("OpenedById");

                    b.HasIndex("StudentId");

                    b.HasIndex("YearId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("GradeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("NameAr")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GradeId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Guardian", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullNameAr")
                        .HasColumnType("TEXT");

                    b.Property<string>("Identity")
                        .HasColumnType("TEXT");

                    b.Property<int>("Relation")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Guardians");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Admission")
                        .HasColumnType("TEXT");

                    b.Property<string>("BirthDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiredIdentity")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpiredPassport")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullNameAr")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GuardianId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Identity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile1")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile2")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OtherSchoolId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Passport")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlaceCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Religion")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StudentCountryId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Update")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("GuardianId");

                    b.HasIndex("OtherSchoolId");

                    b.HasIndex("PlaceCountryId");

                    b.HasIndex("StudentCountryId");

                    b.HasIndex("UserId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("api.Models.UserManagment.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Actor")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastActive")
                        .HasColumnType("TEXT");

                    b.Property<string>("Mobile")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<DateTime>("RegisteringDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SchoolYear", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.School", null)
                        .WithMany()
                        .HasForeignKey("SchoolsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.SchoolManagement.Year", null)
                        .WithMany()
                        .HasForeignKey("YearsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("api.Models.HumanResource.Document", b =>
                {
                    b.HasOne("api.Models.HumanResource.Employee", "Employee")
                        .WithMany("Documents")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("api.Models.HumanResource.Employee", b =>
                {
                    b.HasOne("api.Models.Country", "BirthCountry")
                        .WithMany("BirthCountries")
                        .HasForeignKey("BirthCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Country", "EmployeeCountry")
                        .WithMany("EmployeeCountries")
                        .HasForeignKey("EmployeeCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.HumanResource.Job", "Job")
                        .WithMany("Employees")
                        .HasForeignKey("JobId");

                    b.HasOne("api.Models.UserManagment.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId");

                    b.Navigation("BirthCountry");

                    b.Navigation("EmployeeCountry");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Department", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.Section", "Section")
                        .WithMany("Department")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Grade", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.Department", "Department")
                        .WithMany("Grades")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.School", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.OtherSchool", "OtherSchool")
                        .WithMany("Schools")
                        .HasForeignKey("OtherSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OtherSchool");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Section", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.School", "School")
                        .WithMany("Sections")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("School");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Term", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.Year", "Year")
                        .WithMany("Terms")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Year");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Account", b =>
                {
                    b.HasOne("api.Models.StudentInformation.Class", "Class")
                        .WithMany("Accounts")
                        .HasForeignKey("ClassId");

                    b.HasOne("api.Models.SchoolManagement.Grade", "Grade")
                        .WithMany("Accounts")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.UserManagment.User", "OpenedBy")
                        .WithMany()
                        .HasForeignKey("OpenedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.StudentInformation.Student", "Student")
                        .WithMany("Accounts")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.SchoolManagement.Year", "Year")
                        .WithMany("Accounts")
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Grade");

                    b.Navigation("OpenedBy");

                    b.Navigation("Student");

                    b.Navigation("Year");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Class", b =>
                {
                    b.HasOne("api.Models.SchoolManagement.Grade", "Grade")
                        .WithMany("Classes")
                        .HasForeignKey("GradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Grade");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Guardian", b =>
                {
                    b.HasOne("api.Models.UserManagment.User", "User")
                        .WithMany("Guardians")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Student", b =>
                {
                    b.HasOne("api.Models.StudentInformation.Guardian", "Guardian")
                        .WithMany("Students")
                        .HasForeignKey("GuardianId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.SchoolManagement.OtherSchool", "OtherSchool")
                        .WithMany("Students")
                        .HasForeignKey("OtherSchoolId");

                    b.HasOne("api.Models.Country", "PlaceCountry")
                        .WithMany("PlaceCountries")
                        .HasForeignKey("PlaceCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.Country", "StudentCountry")
                        .WithMany("StudentCountries")
                        .HasForeignKey("StudentCountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("api.Models.UserManagment.User", "User")
                        .WithMany("Students")
                        .HasForeignKey("UserId");

                    b.Navigation("Guardian");

                    b.Navigation("OtherSchool");

                    b.Navigation("PlaceCountry");

                    b.Navigation("StudentCountry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("api.Models.Country", b =>
                {
                    b.Navigation("BirthCountries");

                    b.Navigation("EmployeeCountries");

                    b.Navigation("PlaceCountries");

                    b.Navigation("StudentCountries");
                });

            modelBuilder.Entity("api.Models.HumanResource.Employee", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("api.Models.HumanResource.Job", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Department", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Grade", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Classes");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.OtherSchool", b =>
                {
                    b.Navigation("Schools");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.School", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Section", b =>
                {
                    b.Navigation("Department");
                });

            modelBuilder.Entity("api.Models.SchoolManagement.Year", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Terms");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Class", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Guardian", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("api.Models.StudentInformation.Student", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("api.Models.UserManagment.User", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Guardians");

                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
